# create a function to make string values integers
def makeInt(dataArray):
    for i in range(len(dataArray)):
        try:
            dataArray[i] = int(dataArray[i])
        except ValueError:
            dataArray[i] = float(dataArray[i])
    return dataArray
    
def func(x, c): # logarithmic function of xData + yData for "y-intercept"
    with np.errstate(divide='ignore'):
        return np.log10(x) + c

# create a function to plot a regression
def plotReg(x, y):
    xMin = x.min()
    xMax = x.max()

    yMin = y.min()
    yMax = y.max()

    xData = np.linspace(xMin, xMax)
    yData = np.linspace(yMin, yMax)

    plt.plot(xData, yData) # linear model
    plt.plot(xData, func(xData, yData)) # logarithmic model
    plt.grid(True)
    plt.show()

    # plot resid
    residArray = []
    for i in range(len(yData)):
        resid = yData[i] - func(xData[i], yData[i])
        residArray.append(resid)
    print(residArray)

    plt.scatter(xData, residArray)
    plt.grid(True)
    plt.show()

# plot the data, with linear regression called as an implicit function
def plotPlt(var1, var2, string1, string2, color):
    plt.scatter(var1, var2, color='%s' % color)
    plt.title('%s vs. %s' % (string2, string1), fontsize=14)
    plt.xlabel("%s" % string1, fontsize=12)
    plt.ylabel("%s" % string2, fontsize=12)

    plotReg(var1, var2)
    plt.grid(True)
    plt.show()
    
