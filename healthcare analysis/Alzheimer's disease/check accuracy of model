checkAccuracyArray = []
correctVal = 0
incorrectVal = 0

# non-demented is 0, demented is 1
for i in range(len(patientArray)):
    if patientArray[i] > 0.5 and group[i] == 1:
        correct = True
        correctVal += 1
    elif patientArray[i] < 0.5 and group[i] == 0:
        correct = True
        correctVal += 1
    elif patientArray[i] == 0.5 and group[i] == 0.5: # not a single patient was converted
        correct = True
        correctVal += 1
    else:
        correct = False
        incorrectVal += 1
    checkAccuracyArray.append(correct)

print(checkAccuracyArray)
print('Number correct: %s' % correctVal)
print('Number incorrect: %s' % incorrectVal)

decimal = correctVal / (correctVal + incorrectVal)
percent = round(decimal * 100)
print("The model was %s%% correct." % percent)

percentRandArray = []
for i in range(len(randBoolArray)):
    randIntGen(group)
    decimalRand = randCorrectNum / (randCorrectNum + randIncorrectNum)
    percentRand = round(decimalRand * 100)
    percentRandArray.append(percentRand)

print("\nIn the following arrays, 0 lacks the disease, 0.5 is remission, and 1 is the disease.")
print("Alzheimers' diagnoses: %s" % group)

randIntGen(group)
print("Randomly generated values: %s" % randArray)

print("\nBoolean array of random numbers correct: %s" % randBoolArray)
print("Number correct: %s" % randCorrectNum)
print("Number incorrect: %s" % randIncorrectNum)

print("\nThe model's accuracy: %s%%" % percent)
# the array of 373 percentages is randomly generated to test how much the model improves upon pure chance
print("The array of 373 percentages that were randomly generated: %s" % percentRandArray)
print("The same array, sorted: %s" % sorted(percentRandArray))

randIndex = random.randint(0, len(percentRandArray))
# compare an arbitrary random percentage with the value from the neural network algorithm
print("A random choice from the random percentages: %s%%" % percentRandArray[randIndex])

# find mean and median of all random choices
totalCount = 0
for i in range(len(percentRandArray)):
    totalCount += percentRandArray[i]

mean = round(totalCount / len(percentRandArray))
median = statistics.median(sorted(percentRandArray))

print("The average of all the random percentages: %s%%" % mean)
print("The median of all the random percentages: %s%%" % median)
