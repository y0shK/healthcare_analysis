def cleanArrays(array):
    for i in range(len(array)):
        if array[i] == '':
            array[i] = 0

def convertToIntegers(array):
    for i in range(len(array)):
        array[i] = int(array[i])

def sigmoid(x):
    return 1/(1+np.exp(-x))

mseSum = 0
def create_plt_groups(string, color, df):
    plt.scatter(df[string], df['Group'], color='%s' % color)
    plt.title('Groups by %s' % string, fontsize=14)
    plt.xlabel("%s" % string, fontsize=12)
    plt.ylabel("Group", fontsize=12)

    max = df['%s' %string].max()
    min = df['%s' %string].min()

    range = np.arange(-1 * min, max, 1)
    sig = sigmoid(range)
    plt.plot(sig)
    plt.grid(True)
    plt.show()

def computeMseSum(string, df):
    max = df['%s' % string].max()
    min = df['%s' % string].min()

    x = np.arange(min, max, 1)
    sig = sigmoid(x)

    # perform mseSum variant on logistic fit to see how closely each variable affects the classification
    global mseSum # re-initialize value to 0 every time the method is called

    # this process results in a matrix because df['Group'] feeds in values in arrays, so the output is an array
    for i in range(len(x)):
        mseNew = np.abs([sig[i] - df['Group']]) # math.abs(logistic "trend line" - actual value) for all values
        mseSum += mseNew
    print("Error matrix for %s: %s" % (string.lower(), mseSum))

    # this process results in a single number, because the matrix's elements are added, not the matrix itself
    mseMatrixSum = 0
    for i in range(len(mseSum)):
        mseMatrixSum += mseSum[i][0] # i is each row, 0 is each column (i.e. going through all elements)
    mseMatrixMean = mseMatrixSum / (len(x) * 10) # multiply by 10 so mseMatrixMean is between 0 and 1
    
    print("Mean of the matrix for %s, or the error: %s" % (string.lower(), mseMatrixMean))
    print("\n")
    
# create random numbers, appends them, checks them against Alzheimers' patients
def randIntGen(array):
    # use function.variable = variable to emphasize that function value is the real value
    randIntGen.randArray = []
    randIntGen.randBoolArray = []
    randIntGen.randCorrectNum = 0
    randIntGen.randIncorrectNum = 0

    # use global to instantiate variables
    global randArray
    global randBoolArray
    global randCorrectNum
    global randIncorrectNum

    # re-define variables using local counterparts; these are globally used
    randArray = randIntGen.randArray
    randBoolArray = randIntGen.randBoolArray
    randCorrectNum = randIntGen.randCorrectNum
    randIncorrectNum = randIntGen.randIncorrectNum

    for i in range(len(array)):
        randInt = random.randint(0, 2)  # 0 lacks disease, 1 is remission, 2 has disease

        # divide randInt by 2 to fit Alzheimer's predictions
        randInt = randInt / 2
        randArray.append(randInt)

    # check for whether randomness is actually accurate
    for j in range(len(array)):
        if randArray[j] == array[j]:
            randCorrect = True
            randCorrectNum += 1
        elif randArray[j] != group[j]:
            randCorrect = False
            randIncorrectNum += 1
        randBoolArray.append(randCorrect)

    return randArray, randCorrect, randCorrectNum, randIncorrectNum
    
